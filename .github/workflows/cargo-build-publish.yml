on:
  workflow_call:
    inputs:
      toolchain:
        description: 'Rust toolchain'
        default: 'stable'
        type: string
      test-args:
        description: 'Cargo test arguments'
        default: '--workspace'
        type: string
    secrets:
      CRATESIO_TOKEN:
        required: false

name: CI

env:
  CARGO_TERM_COLOR: always

jobs:
  lint:
    outputs:
      matrix: ${{ steps.matrix.outputs.matrix }}
    runs-on: ubuntu-latest
    steps:
      - name: Check out repository
        uses: actions/checkout@v3

      - name: Check cargo config
        run: |
          if [[ -f .cargo/config.toml ]]; then
            cargo_config=".cargo/config.toml"
          elif [[ -f .cargo/config ]]; then
            cargo_config=".cargo/config"
          fi

          echo "::set-output name=cargo-config::${cargo_config}"
        id: cargo-config

      - name: Get target
        uses: SebRollen/toml-action@v1.0.0
        if: ${{ steps.cargo-config.outputs.cargo-config != '' }}
        id: cargo-target
        with:
          file: ${{ steps.cargo-config.outputs.cargo-config }}
          field: 'build.target'

      - name: Install toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
          components: clippy
          target: ${{ steps.cargo-target.outputs.value }}

      - name: Set up cache
        uses: Swatinem/rust-cache@3bb3a9a087029c7bc392586cdc88cb6f66b9c6ef

      - name: Run cargo check
        uses: actions-rs/cargo@v1
        with:
          command: check

      - name: Run cargo clippy
        uses: actions-rs/clippy-check@v1
        with:
          token: ${{ github.token }}
          args: -- -D warnings

      - name: Generate build/test matrix
        run: |
          if [[ -n "${target}" ]]; then
            test_matrix="
              {
                \"include\": [{
                  \"os\": \"ubuntu-latest\",
                  \"target\": $(jq -R <<< "${target}"),
                  \"test-args\": $(jq -R <<< "${test_args} --target ${target}"),
                  \"use-cross\": true
                }]
              }
            "
          else
            test_matrix='
              {
                "include": [
                  {
                    "os": "ubuntu-latest",
                    "target": "x86_64-unknown-linux-gnu"
                  },
                  {
                    "os": "macos-latest",
                    "target": "x86_64-apple-darwin"
                  }
                ]
              }
            '
          fi

          jq -C <<< "${test_matrix}"

          echo "::set-output name=matrix::$(jq -c <<< "${test_matrix}")"
        env:
          target: ${{ steps.cargo-target.outputs.value }}
          test_args: ${{ inputs.test-args }}
        id: matrix

  test:
    name: test (${{ matrix.target }})
    runs-on: ${{ matrix.os }}
    needs: lint
    strategy:
      matrix: ${{ fromJSON(needs.lint.outputs.matrix) }}
    steps:
      - name: Check out repository
        uses: actions/checkout@v3

      - name: Install toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ inputs.toolchain }}
          override: true
          target: ${{ matrix.target }}

      - name: Set up cache
        uses: Swatinem/rust-cache@3bb3a9a087029c7bc392586cdc88cb6f66b9c6ef

      - name: Run tests without default features
        uses: actions-rs/cargo@v1
        with:
          command: test
          args: >
            --no-fail-fast
            ${{ matrix.test-args }}
            --no-default-features
          use-cross: ${{ matrix.use-cross }}

      - name: Run tests with default features
        uses: actions-rs/cargo@v1
        with:
          command: test
          args: >
            --no-fail-fast
            ${{ matrix.test-args }}
          use-cross: ${{ matrix.use-cross }}

      - name: Run tests with all features
        uses: actions-rs/cargo@v1
        with:
          command: test
          args: >
            --no-fail-fast
            ${{ matrix.test-args }}
            --all-features
          use-cross: ${{ matrix.use-cross }}

  build:
    name: build (${{ matrix.target }})
    runs-on: ${{ matrix.os }}
    needs: lint
    strategy:
      matrix: ${{ fromJSON(needs.lint.outputs.matrix) }}
    steps:
      - name: Check out repository
        uses: actions/checkout@v3

      - name: Install toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ inputs.toolchain }}
          override: true
          target: ${{ matrix.target }}

      - name: Set up cache
        uses: Swatinem/rust-cache@3bb3a9a087029c7bc392586cdc88cb6f66b9c6ef

      - name: Build with all features
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: >
            --release
            --target ${{ matrix.target }}
            --all-features
          use-cross: ${{ matrix.use-cross }}

      - name: Gather artifacts
        run: |
          target_dir="target/${target}/release/"
          ls -al "${target_dir}"

          metadata="$(cargo metadata --format-version 1 --no-deps)"
          name="$(echo "${metadata}" | jq -r '.packages[0].name')"
          files="$(
            cargo metadata --format-version 1 --no-deps |
            jq -c "[.packages[0].targets[] | select(.kind[] | contains(\"bin\")) | .name] | map($(jq -R <<< "${target_dir}") + .)"
          )"

          jq -C <<< "${files}"

          echo "::set-output name=name::${name}"
          echo "::set-output name=files::${files}"
        env:
          target: ${{ matrix.target }}
        id: artifact

      - name: Upload artifacts
        if: ${{ fromJson(steps.artifact.outputs.files) }}
        uses: actions/upload-artifact@v3
        with:
          name: ${{ steps.artifact.outputs.name }}-${{ matrix.target }}
          path: ${{ join(fromJson(steps.artifact.outputs.files), '\n') }}
          if-no-files-found: error

  publish:
    runs-on: ubuntu-latest
    needs: [lint, test, build]
    steps:
      - name: Check out repository
        uses: actions/checkout@v3

      - name: Install toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ inputs.toolchain }}
          override: true

      - name: Set up cache
        uses: Swatinem/rust-cache@3bb3a9a087029c7bc392586cdc88cb6f66b9c6ef

      - name: Log into crates.io
        if: github.event_name != 'pull_request'
        uses: actions-rs/cargo@v1
        with:
          command: login
          args: -- ${{ secrets.CRATESIO_TOKEN }}

      - name: Publish crate
        uses: actions-rs/cargo@v1
        with:
          command: publish
          args: ${{ !startsWith(github.ref, 'refs/tags/v') && '--dry-run' || '' }}
