on:
  workflow_call:
    inputs:
      toolchain:
        description: 'Rust toolchain'
        default: 'stable'
        type: string
      test-args:
        description: 'Cargo test arguments'
        default: '--workspace'
        type: string
      test-matrix:
        description: 'Test matrix in JSON'
        default: |
          {
            "os": [
              "ubuntu-latest",
              "macos-latest"
            ]
          }
        type: string
    secrets:
      CRATESIO_TOKEN:
        required: false

name: CI

env:
  CARGO_TERM_COLOR: always

jobs:
  lint:
    outputs:
      target: ${{ steps.cargo-target.outputs.value }}
    runs-on: ubuntu-latest
    steps:
      - name: Check out repository
        uses: actions/checkout@v3

      - name: Check cargo config
        run: |
          if [[ -f .cargo/config.toml ]]; then
            cargo_config=".cargo/config.toml"
          elif [[ -f .cargo/config ]]; then
            cargo_config=".cargo/config"
          fi

          echo "::set-output name=cargo-config::${cargo_config}"
        id: cargo-config

      - name: Get target
        uses: SebRollen/toml-action@v1.0.0
        if: ${{ steps.cargo-config.outputs.cargo-config != '' }}
        id: cargo-target
        with:
          file: ${{ steps.cargo-config.outputs.cargo-config }}
          field: 'build.target'

      - name: Install toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
          components: clippy
          target: ${{ steps.cargo-target.outputs.value }}

      - name: Set up cache
        uses: Swatinem/rust-cache@3bb3a9a087029c7bc392586cdc88cb6f66b9c6ef

      - name: Run cargo check
        uses: actions-rs/cargo@v1
        with:
          command: check

      - name: Run cargo clippy
        uses: actions-rs/clippy-check@v1
        with:
          token: ${{ github.token }}
          args: -- -D warnings

  test:
    runs-on: ${{ matrix.os }}
    needs: lint
    strategy:
      matrix: ${{ fromJSON(inputs.test-matrix) }}
    steps:
      - name: Check out repository
        uses: actions/checkout@v3

      - name: Install toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ inputs.toolchain }}
          override: true
          target: ${{ needs.lint.outputs.target }}

      - name: Set up cache
        uses: Swatinem/rust-cache@3bb3a9a087029c7bc392586cdc88cb6f66b9c6ef

      - name: Run tests without default features
        uses: actions-rs/cargo@v1
        with:
          command: test
          args: --no-fail-fast ${{ inputs.test-args }} --no-default-features

      - name: Run tests with default features
        uses: actions-rs/cargo@v1
        with:
          command: test
          args: --no-fail-fast ${{ inputs.test-args }}

      - name: Run tests with all features
        uses: actions-rs/cargo@v1
        with:
          command: test
          args: --no-fail-fast ${{ inputs.test-args }} --all-features

  publish:
    runs-on: ubuntu-latest
    needs: [lint, test]
    steps:
      - name: Check out repository
        uses: actions/checkout@v3

      - name: Install toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ inputs.toolchain }}
          override: true
          target: ${{ needs.lint.outputs.target }}

      - name: Set up cache
        uses: Swatinem/rust-cache@3bb3a9a087029c7bc392586cdc88cb6f66b9c6ef

      - name: Log into crates.io
        if: github.event_name != 'pull_request'
        uses: actions-rs/cargo@v1
        with:
          command: login
          args: -- ${{ secrets.CRATESIO_TOKEN }}

      - name: Publish crate
        uses: actions-rs/cargo@v1
        with:
          command: publish
          args: ${{ !startsWith(github.ref, 'refs/tags/v') && '--dry-run' || '' }}
